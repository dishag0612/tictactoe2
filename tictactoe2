package tictactoe;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.Serializable;

public class Tictactoe extends JFrame implements ActionListener, Serializable {
    private static final long serialVersionUID = 1L;
    private JButton[][] buttons = new JButton[3][3]; // 3x3 grid of buttons
    private char currentPlayer = 'X'; // X starts the game
    private boolean gameActive = true; // to keep track of game state

    public Tictactoe() {
        setTitle("Tic-Tac-Toe");
        setSize(400, 400);
        setLayout(new GridLayout(3, 3)); // 3x3 grid layout

        // Initialize the buttons
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col] = new JButton("");
                buttons[row][col].setFont(new Font("Arial", Font.PLAIN, 60));
                buttons[row][col].setFocusPainted(false);
                buttons[row][col].addActionListener(this);
                add(buttons[row][col]);
            }
        }

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameActive) return;

        JButton buttonClicked = (JButton) e.getSource();

        // Check if the button is already clicked
        if (buttonClicked.getText().equals("")) {
            buttonClicked.setText(String.valueOf(currentPlayer));

            if (checkWinner()) {
                gameActive = false;
                JOptionPane.showMessageDialog(this, "Player " + currentPlayer + " wins!");
                resetGame();
            } else if (isBoardFull()) {
                gameActive = false;
                JOptionPane.showMessageDialog(this, "It's a draw!");
                resetGame();
            } else {
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X'; // Switch player
            }
        }
    }

    // Check if the board is full (draw)
    private boolean isBoardFull() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (buttons[row][col].getText().equals("")) {
                    return false;
                }
            }
        }
        return true;
    }

    // Check if there is a winner
    private boolean checkWinner() {
        // Check rows, columns, and diagonals for a win
        for (int i = 0; i < 3; i++) {
            if (checkRowCol(buttons[i][0].getText(), buttons[i][1].getText(), buttons[i][2].getText()) ||
                checkRowCol(buttons[0][i].getText(), buttons[1][i].getText(), buttons[2][i].getText())) {
                return true;
            }
        }
        return checkRowCol(buttons[0][0].getText(), buttons[1][1].getText(), buttons[2][2].getText()) ||
               checkRowCol(buttons[0][2].getText(), buttons[1][1].getText(), buttons[2][0].getText());
    }

    // Helper method to check if three buttons in a row/col/diagonal have the same text
    private boolean checkRowCol(String s1, String s2, String s3) {
        return (!s1.equals("") && s1.equals(s2) && s2.equals(s3));
    }

    // Reset the game after a win or draw
    private void resetGame() {
        int response = JOptionPane.showConfirmDialog(this, "Do you want to play again?", "Play Again", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    buttons[row][col].setText("");
                }
            }
            currentPlayer = 'X'; // X starts the new game
            gameActive = true;
        } else {
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        new Tictactoe();
    }
}
